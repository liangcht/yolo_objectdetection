#!/bin/bash

# Default values
CONFIG_FILE=NONE
DATA_DIR=NONE
LOG_DIR=$PWD
MODEL_DIR=NONE
PREV_MODEL_PATH=NONE
IS_MEMCHECK=false
EXTRA_ARGS=""
NUM_GPU=NONE
STDOUT_DIR=$PWD
IS_DEBUG=false
IS_PERF_TRACE=false
IS_GDB_WRAPPED=false

# Parsing command line arguments:
while [[ $# > 0 ]]
do
key="$1"

case $key in
    -h|--help)
    echo "Usage: toolkit-execute [run_options]"
    echo "Options:"
    echo "  -n|--nGPU <num> - how many GPUs used for this job (default NONE)"
    echo "  -c|--configFile <config> - which configuration file to use (default NONE)"
    echo "  -d|--dataDir <path> - directory path to input files (default NONE)"
    echo "  -l|--logDir <path> - directory path to save the log files (default \$PWD)"
    echo "  -m|--modelDir <path> - directory path to save the model files (default NONE)"
    echo "  -s|--stdoutDir <path> - directory path to save the stdout (default \$PWD)"
    echo "  --debug - job is in debug mode (not used)"
    echo "  --perfTrace - job should run in perf trace mode (not used)"
    echo "  --gdbWrapped - job should run with GDB (default false)"
    echo "  --prevModelDir - the prev model path to copy from (default None)"
    echo "  --memCheck - start job in memcheck mode (default false)"
    exit 1
    ;;
    -n|--nGPU)
    NUM_GPU="$2"
    shift # pass argument
    ;;
    -c|--configFile)
    CONFIG_FILE="$2"
    shift # pass argument
    ;;
    -d|--dataDir)
    DATA_DIR="$2"
    shift # pass argument
    ;;
    -l|--logDir)
    LOG_DIR="$2"
    shift # pass argument
    ;;
    -m|--modelDir)
    MODEL_DIR="$2"
    shift # pass argument
    ;;
    -s|--stdoutDir)
    STDOUT_DIR="$2"
    shift # pass argument
    ;;
    --debug)
    IS_DEBUG=true
    ;;
    --perfTrace)
    IS_PERF_TRACE=true
    ;;
    --gdbWrapped)
    IS_GDB_WRAPPED=true
    ;;
    --prevModelDir)
    PREV_MODEL_PATH="$2"
    shift # pass argument
    ;;
    --memCheck)
    IS_MEMCHECK=true
    ;;
    *)
    EXTRA_ARGS="$EXTRA_ARGS $1"
    ;;
esac
shift # past argument or value
done

echo "toolkit-execute: NUM_GPU=$NUM_GPU"
echo "toolkit-execute: CONFIG_FILE=$CONFIG_FILE"
echo "toolkit-execute: DATA_DIR=$DATA_DIR"
echo "toolkit-execute: LOG_DIR=$LOG_DIR"
echo "toolkit-execute: MODEL_DIR=$MODEL_DIR"
echo "toolkit-execute: STDOUT_DIR=$STDOUT_DIR"
echo "toolkit-execute: IS_DEBUG=$IS_DEBUG"
echo "toolkit-execute: IS_PERF_TRACE=$IS_PERF_TRACE"
echo "toolkit-execute: IS_GDB_WRAPPED=$IS_GDB_WRAPPED"
echo "toolkit-execute: PREV_MODEL_PATH=$PREV_MODEL_PATH"
echo "toolkit-execute: IS_MEMCHECK=$IS_MEMCHECK"
echo "toolkit-execute: EXTRA_ARGS=$EXTRA_ARGS"

set -ex # Echo all commands and exit on first error.

export IS_DEBUG
export IS_PERF_TRACE
export IS_MEMCHECK
export IS_GDB_WRAPPED

# Display node info.
OMPI_COMM_WORLD_LOCAL_RANK=${OMPI_COMM_WORLD_LOCAL_RANK:-0}
if [[ $OMPI_COMM_WORLD_LOCAL_RANK == 0 ]]; then
    nvidia-smi --query-gpu=name --format=csv,noheader || true
    # Add this user to "users" which already has proper permissions inside
    sudo usermod -aG users ${USER:-$PHILLY_USER} || true
fi

# Docker's ENV is not set as expected, work around it here
source /home/job/envs.sh

if [[ -f "$CONFIG_FILE".sh ]]; then
    # Running the optional pre-run script that can prepare the environment
    source "$CONFIG_FILE".sh
fi

python -u $CONFIG_FILE --configfile $CONFIG_FILE --datadir $DATA_DIR --outputdir $MODEL_DIR --logdir $LOG_DIR --prevmodelpath $PREV_MODEL_PATH --stdoutdir $STDOUT_DIR --numgpu $NUM_GPU $EXTRA_ARGS
RETURN_CODE=$?

if [[ -f "$CONFIG_FILE".post.sh ]]; then
    # Running the optional post-run-script
    source "$CONFIG_FILE".post.sh
fi

exit $RETURN_CODE
